// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PresenceSDK
import AuthenticationServices
import Contacts
import ContactsUI
import Darwin
import Foundation
import MessageUI
import PassKit
import Presence
@_exported import PresenceSDK
import ResaleSdk
import SafariServices
import Security
import Swift
import SystemConfiguration
import TicketmasterFoundation
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PSDK : ObjectiveC.NSObject {
  public typealias ConfigSuccessHandler = () -> Swift.Void
  public typealias ConfigFailureHandler = (Swift.Error?) -> Swift.Void
  public typealias AccessTokenSuccessCompletionHandler = (Swift.String) -> Swift.Void
  public typealias AccessTokenFailureCompletionHandler = (Swift.Error?, Swift.Bool) -> Swift.Void
  @objc final public var hostLoginQueryParams: [Swift.String : Swift.String]
  @objc final public var archticsLoginQueryParams: [Swift.String : Swift.String]
  @objc deinit
}
extension PSDK {
  @objc(PresenceSDKLoginButtons) public enum LoginButtons : Swift.Int {
    case forgotPassword
    case createAccount
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public var loginButton: PresenceSDK.PSDK.LoginButtons {
    @objc get
    @objc set
  }
}
extension PSDK {
  @objc public static func getPresenceSDK() -> PresenceSDK.PSDK
  @objc final public func getVersionNumber() -> Swift.String
  @objc final public func setConfig(consumerKey: Swift.String, displayName: Swift.String? = nil, useNewAccountsManager: Swift.Bool = false, quickLogin: Swift.Bool = true, autoLogin: Swift.Bool = true)
  @objc final public func checkConfig(success: @escaping PresenceSDK.PSDK.ConfigSuccessHandler, failure: @escaping PresenceSDK.PSDK.ConfigFailureHandler)
  @objc final public func setBrandingColors(_ brandingColors: PresenceSDK.BrandingColors)
  @objc final public func setLogo(_ image: UIKit.UIImage?)
  @objc final public func setTheme(theme: PresenceSDK.SDKTheme)
  @objc final public func setEnvironment(sdkEnvironment: PresenceSDK.SDKEnvironment)
}
extension PSDK {
  @objc final public func start(presenceSDKView: PresenceSDK.PresenceSDKView?, loginDelegate: PresenceSDK.PresenceLoginDelegate)
}
extension PSDK {
  @objc final public func login(to backendName: PresenceSDK.PresenceLogin.BackendName, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func getAccessToken(backendName: PresenceSDK.PresenceLogin.BackendName, presentLoginUI: Swift.Bool = true, success: @escaping PresenceSDK.PSDK.AccessTokenSuccessCompletionHandler, failure: @escaping PresenceSDK.PSDK.AccessTokenFailureCompletionHandler)
}
extension PSDK {
}
extension PSDK {
  @objc final public func isLoggedIn() -> Swift.Bool
  @objc final public func isLoggedIntoHost() -> Swift.Bool
  @objc final public func isLoggedIntoTeam() -> Swift.Bool
  @objc final public func hasUserSignedIn() -> Swift.Bool
  @objc final public func hasUserSignedInHost() -> Swift.Bool
  @objc final public func hasUserSignedInTeam() -> Swift.Bool
}
extension PSDK {
  @objc final public func getMemberInfo(backendName: PresenceSDK.PresenceLogin.BackendName, completion: @escaping (PresenceSDK.PresenceMember?, Swift.Error?) -> Swift.Void)
}
extension PSDK {
  @objc final public func resetPasswordForHost(success: @escaping PresenceSDK.PSDK.AccessTokenSuccessCompletionHandler, failure: @escaping PresenceSDK.PSDK.AccessTokenFailureCompletionHandler, token: Swift.String? = nil)
}
extension PSDK {
  @objc final public func startMFAValidation(on controller: UIKit.UIViewController, additionalProperties: [Swift.String : Any] = [String: Any](), success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (Foundation.NSError) -> Swift.Void)
}
extension PSDK {
  @objc final public func logOut()
  @objc final public func logOut(completion: @escaping (Swift.Bool, Swift.Error?, Swift.Bool, Swift.Error?) -> Swift.Void = { _, _, _, _ in })
  @objc final public func logOutHost(success: @escaping () -> Swift.Void = { }, failure: @escaping (Swift.Error) -> Swift.Void = { _ in })
  @objc final public func logOutTeam(success: @escaping () -> Swift.Void = { }, failure: @escaping (Swift.Error) -> Swift.Void = { _ in })
}
extension PSDK {
  @objc final public func jumpToOrderOrEvent(id: Swift.String)
  @objc final public func jumpToOrderOrEvent(id: Swift.String, type: PresenceSDK.PSDK.IdType)
  @objc final public func jumpToOrderOrEvent(id: Swift.String, type: PresenceSDK.PSDK.IdType, action: PresenceSDK.PSDK.ActionType)
  @objc final public func jumpToOrderOrEvent(id: Swift.String, type: PresenceSDK.PSDK.IdType, action: PresenceSDK.PSDK.ActionType, orderDelegate: PresenceSDK.PresenceOrderDelegate)
  @objc(PresenceSDKIdType) public enum IdType : Swift.Int {
    case event
    case order
    case any
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PresenceSDKActionType) public enum ActionType : Swift.Int {
    case posting
    case transfer
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers public class PresenceLogin {
  @objc public enum BackendName : Swift.Int, Swift.CustomStringConvertible {
    case host
    case accountManager
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum LoginMethod : Swift.Int, Swift.CustomStringConvertible {
    case conventional
    case automatic
    case fingerprint
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum IdentityTheme : Swift.Int, Swift.CustomStringConvertible {
    case ticketmaster
    case ticketmasterNew
    case livenation
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BrandingColors : ObjectiveC.NSObject {
  @objc public init(navBarColor: UIKit.UIColor, ticketColor: UIKit.UIColor, buttonColor: UIKit.UIColor)
  @objc public init(oneColor: UIKit.UIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SDKEnvironment : Swift.Int {
  case Development
  case PreProduction
  case Staging
  case Production
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension UIViewController {
  public static func swizzle()
}
@objc @_inheritsConvenienceInitializers final public class PresenceEventAnalytics : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers @objcMembers final public class Action : ObjectiveC.NSObject {
    @objc public static let ACTION_MYTICKETSCREENSHOWED: Swift.String
    @objc public static let ACTION_MANAGETICKETSCREENSHOWED: Swift.String
    @objc public static let ACTION_ADDPAYMENTINFOSCREENSHOWED: Swift.String
    @objc public static let ACTION_MYTICKETBARCODESCREENSHOWED: Swift.String
    @objc public static let ACTION_TICKETDETAILSSCREENSHOWED: Swift.String
    @objc public static let ACTION_FINDNEWTICKETSPRESSED: Swift.String
    @objc public static let ACTION_MYTICKETBARCODESCREENSHOT: Swift.String
    @objc public static let ACTION_HEALTH_CHECK_MORE_INFO_CLICK: Swift.String
    @objc public static let ACTION_HEALTH_CHECK_LEARN_MORE_CLICK: Swift.String
    @objc public static let ACTION_HEALTH_CHECK_GOT_IT_CLICK: Swift.String
    @objc public static let ACTION_TRANSFERINITIATED: Swift.String
    @objc public static let ACTION_TRANSFERCANCELLED: Swift.String
    @objc public static let MIXPANEL_ACTION_TRANSFERINITIATED: Swift.String
    @objc public static let MIXPANEL_ACTION_TRANSFERCANCELLED: Swift.String
    @objc public static let ACTION_RESALEINITIATED: Swift.String
    @objc public static let ACTION_RESALECANCELLED: Swift.String
    @objc public static let ACTION_RESALEEDITED: Swift.String
    @objc public static let MIXPANEL_ACTION_RESALEINITIATED: Swift.String
    @objc public static let MIXPANEL_ACTION_RESALECANCELLED: Swift.String
    @objc public static let MIXPANEL_ACTION_RESALEEDITED: Swift.String
    @objc public static let ACTION_FED_LOGIN_SCREEN_DISMISSED_AFTER_SUCCESS_LOGIN_NO_LINK: Swift.String
    @objc public static let ACTION_FED_LOGIN_LINK_ACCOUNTS_SCREEN_SHOWED: Swift.String
    @objc public static let ACTION_FED_LOGIN_LINK_ACCOUNTS_SCREEN_DISMISSED: Swift.String
    @objc public static let ACTION_GAME_DAY_MODAL_SHOWED: Swift.String
    @objc public static let ACTION_GAME_DAY_FLOW_REJECTED: Foundation.Notification.Name
    @objc public static let ACTION_GAME_DAY_FLOW_ACCEPTED: Swift.String
    @objc public static let ACTION_FED_LOGIN_NO_THANKS_BUTTON_PRESSED: Swift.String
    @objc public static let ACTION_FED_LOGIN_LINK_ACCOUNTS_BUTTON_PRESSED: Swift.String
    @objc public static let ACTION_ADD_TO_WALLET_INITIATE: Swift.String
    @objc public static let ACTION_ADD_TO_WALLET_CANCEL: Swift.String
    @objc public static let ACTION_ADD_TO_WALLET_FINISH: Swift.String
    @objc deinit
    @objc override dynamic public init()
  }
  @objc @_inheritsConvenienceInitializers @objcMembers final public class Data : ObjectiveC.NSObject {
    @objc public static let EVENT_ID: Swift.String
    @objc public static let EVENT_NAME: Swift.String
    @objc public static let EVENT_DATE: Swift.String
    @objc public static let EVENT_IMAGE_URL: Swift.String
    @objc public static let EVENT_ORDER_ID: Swift.String
    @objc public static let VENUE_NAME: Swift.String
    @objc public static let VENUE_ID: Swift.String
    @objc public static let CURRENT_TICKET_COUNT: Swift.String
    @objc public static let ARTIST_NAME: Swift.String
    @objc public static let ARTIST_ID: Swift.String
    @objc public static let SECTION: Swift.String
    @objc public static let ROW: Swift.String
    @objc public static let SEAT: Swift.String
    @objc public static let INITIATE_TRANSFER_TICKET_COUNT: Swift.String
    @objc public static let INITIATE_TRANSFER_TICKET_FACEVALUE: Swift.String
    @objc public static let CANCEL_TRANSFER_ID: Swift.String
    @objc public static let CANCEL_TRANSFER_ORDER_ID: Swift.String
    @objc public static let INITIATE_RESALE_TICKET_COUNT: Swift.String
    @objc public static let INITIATE_RESALE_PRICE: Swift.String
    @objc public static let TICKET_COUNT: Swift.String
    @objc public static let POSTING_ID: Swift.String
    @objc public static let PAYMENT_METHOD: Swift.String
    @objc public static let REFUND_METHOD: Swift.String
    @objc public static let LISTING_PRICE: Swift.String
    @objc public static let UPDATE_RESALE_POSTING_ID: Swift.String
    @objc public static let UPDATE_RESALE_PRICE: Swift.String
    @objc public static let RESALE_BUYER_FEES: Swift.String
    @objc public static let RESALE_ORIGINAL_FACE_VALUE: Swift.String
    @objc public static let RESALE_SELLER_PAYOUT: Swift.String
    @objc public static let RESALE_SELLER_FEES: Swift.String
    @objc public static let CANCEL_RESALE_POSTING_ID: Swift.String
    @objc deinit
    @objc override dynamic public init()
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol PresenceCountry {
  @objc var id: Swift.Int { get }
  @objc var standard: Swift.String? { get }
  @objc var code: Swift.String? { get }
  @objc var name: Swift.String? { get }
}
@objc public protocol PresenceMember {
  @objc var id: Swift.String { get }
  @objc var firstName: Swift.String { get }
  @objc var lastName: Swift.String { get }
  @objc var email: Swift.String { get }
  @objc var postalCode: Swift.String { get }
  @objc var language: Swift.String { get }
  @objc var market: Swift.String { get }
  @objc var country: PresenceSDK.PresenceCountry? { get }
  @objc var hmacId: Swift.String { get }
  @objc var doNotSellFlag: Swift.Bool { get }
  @objc var idToken: Swift.String { get }
}
extension String : Swift.Error {
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable final public class PresenceSDKView : UIKit.UIView {
  @objc override dynamic public init(frame rect: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public func awakeFromNib()
  @objc override final public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc override final public func didMoveToWindow()
  @objc final public func refreshView()
  @objc deinit
}
@objc public protocol PresenceLoginDelegate {
  @available(*, unavailable, renamed: "onLoginWindowDidDisplay(backendName:)")
  @objc optional func loginWindowDidDisplay()
  @objc optional func onLoginWindowDidDisplay(backendName: PresenceSDK.PresenceLogin.BackendName)
  @objc optional func onLoginSuccessful(backendName: PresenceSDK.PresenceLogin.BackendName, accessToken: Swift.String)
  @objc optional func onLoginCancelled(backendName: PresenceSDK.PresenceLogin.BackendName)
  @objc optional func onMemberUpdated(backendName: PresenceSDK.PresenceLogin.BackendName, member: PresenceSDK.PresenceMember)
  @objc optional func onLoginFailed(backendName: PresenceSDK.PresenceLogin.BackendName, error: Foundation.NSError)
  @available(*, unavailable, renamed: "onLoginForgotPasswordClicked(backendName:)")
  @objc optional func onLoginForgotPasswordClicked()
  @objc optional func onLoginForgotPasswordClicked(backendName: PresenceSDK.PresenceLogin.BackendName)
  @objc optional func onCacheCleared()
  @objc optional func onLogoutSuccessful(backendName: PresenceSDK.PresenceLogin.BackendName)
  @objc optional func onLogoutFailed(backendName: PresenceSDK.PresenceLogin.BackendName, error: Swift.Error)
  @objc optional func onHostRefreshTokenExpired()
  @objc optional func onLogoutAllSuccessful()
  @objc optional func onLoginMethodUsed(backendName: PresenceSDK.PresenceLogin.BackendName, loginMethod: PresenceSDK.PresenceLogin.LoginMethod)
  @objc optional func onTokenRefreshed(backendName: PresenceSDK.PresenceLogin.BackendName, accessToken: Swift.String)
  @objc optional func onRefreshTokenFailed(backendName: PresenceSDK.PresenceLogin.BackendName)
}
@objc public enum SDKTheme : Swift.Int {
  case Light
  case Dark
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PresenceOrderDelegate {
  @objc optional func presentArtistDetailsPage(with artistId: Swift.String)
  @objc optional func presentEventDetailsPage(with eventId: Swift.String)
  @objc optional func presentVenueDetailsPage(with venueId: Swift.String)
}
extension PresenceSDK.PSDK.LoginButtons : Swift.Equatable {}
extension PresenceSDK.PSDK.LoginButtons : Swift.Hashable {}
extension PresenceSDK.PSDK.LoginButtons : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.IdType : Swift.Equatable {}
extension PresenceSDK.PSDK.IdType : Swift.Hashable {}
extension PresenceSDK.PSDK.IdType : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.ActionType : Swift.Equatable {}
extension PresenceSDK.PSDK.ActionType : Swift.Hashable {}
extension PresenceSDK.PSDK.ActionType : Swift.RawRepresentable {}
extension PresenceSDK.PresenceLogin.IdentityTheme : Swift.Equatable {}
extension PresenceSDK.PresenceLogin.IdentityTheme : Swift.Hashable {}
extension PresenceSDK.PresenceLogin.IdentityTheme : Swift.RawRepresentable {}
extension PresenceSDK.PresenceLogin.BackendName : Swift.Equatable {}
extension PresenceSDK.PresenceLogin.BackendName : Swift.Hashable {}
extension PresenceSDK.PresenceLogin.BackendName : Swift.RawRepresentable {}
extension PresenceSDK.PresenceLogin.LoginMethod : Swift.Equatable {}
extension PresenceSDK.PresenceLogin.LoginMethod : Swift.Hashable {}
extension PresenceSDK.PresenceLogin.LoginMethod : Swift.RawRepresentable {}
extension PresenceSDK.SDKEnvironment : Swift.Equatable {}
extension PresenceSDK.SDKEnvironment : Swift.Hashable {}
extension PresenceSDK.SDKEnvironment : Swift.RawRepresentable {}
extension PresenceSDK.SDKTheme : Swift.Equatable {}
extension PresenceSDK.SDKTheme : Swift.Hashable {}
extension PresenceSDK.SDKTheme : Swift.RawRepresentable {}
